"""
Telegram bot implementation for VPN configuration management
"""
import logging
import asyncio
import os
import sys
import time
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ python-telegram-bot
try:
    # –ò–º–ø–æ—Ä—Ç –¥–ª—è python-telegram-bot v20+
    from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
    from telegram.constants import ParseMode
    from telegram.ext import (
        Application, 
        CommandHandler, 
        CallbackQueryHandler, 
        MessageHandler, 
        filters,
        ContextTypes,
        ConversationHandler
    )
    import telegram.error
    # –í –≤–µ—Ä—Å–∏–∏ 20+ CallbackQuery –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ update.callback_query
    HAS_PTB_V20 = True
    logger.info("–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥—É–ª–∏ python-telegram-bot –≤–µ—Ä—Å–∏–∏ 20+")
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π python-telegram-bot: {e}")
    logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot")
    raise

from app import db, app
from models import TelegramUser, Product, Order, VPNConfig, PaymentMethod, Settings
from vpn_utils import generate_config, format_config_for_user
from x_ui_client import XUIClient

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Define conversation states
SELECTING_PRODUCT, CONFIRMING_PURCHASE, PAYMENT_METHOD, AWAITING_PAYMENT = range(4)

# Initialize XUI client
xui_client = XUIClient(
    base_url=os.environ.get('XUI_PANEL_URL', 'http://localhost:54321'),
    username=os.environ.get('XUI_USERNAME', 'admin'),
    password=os.environ.get('XUI_PASSWORD', 'admin')
)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# –•—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —á–∏—Å–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
USER_BLOCK_CACHE = {}  # {telegram_id: (is_blocked, timestamp)}
PRODUCTS_CACHE = {}  # {cache_key: (products_list, timestamp)}
USER_CONFIGS_CACHE = {}  # {user_id: (configs_list, timestamp)}
CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)

async def check_user_blocked(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user = update.effective_user
    if not user:
        return False
        
    current_time = time.time()
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    if user_id in USER_BLOCK_CACHE:
        is_blocked, timestamp = USER_BLOCK_CACHE[user_id]
        # –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π (–Ω–µ —Å—Ç–∞—Ä—à–µ CACHE_TTL —Å–µ–∫—É–Ω–¥)
        if current_time - timestamp < CACHE_TTL:
            if is_blocked:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if update.callback_query:
                    await update.callback_query.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
                    await update.callback_query.message.reply_text(
                        "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
                    )
                else:
                    await update.message.reply_text(
                        "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
                    )
                return True
            return False
    
    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with app.app_context():
        telegram_user = TelegramUser.query.filter_by(telegram_id=user_id).first()
        is_blocked = False
        
        if telegram_user and telegram_user.is_blocked:
            is_blocked = True
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.callback_query:
                await update.callback_query.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
                await update.callback_query.message.reply_text(
                    "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
                )
            else:
                await update.message.reply_text(
                    "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        USER_BLOCK_CACHE[user_id] = (is_blocked, current_time)
        return is_blocked

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /start command"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
    
    # Register or get the user
    with app.app_context():
        telegram_user = TelegramUser.query.filter_by(telegram_id=user.id).first()
        if not telegram_user:
            telegram_user = TelegramUser(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            db.session.add(telegram_user)
            db.session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        welcome_setting = Settings.query.filter_by(key='welcome_message').first()
        if welcome_setting and welcome_setting.value:
            welcome_message = welcome_setting.value.replace('{name}', user.first_name)
        else:
            welcome_message = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Shop Bot, {user.first_name}!\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ –±—ã—Å—Ç—Ä—ã–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ "
                "–¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
            )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏-–≤–∫–ª–∞–¥–∫–∏
    buttons = [
        [
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main"),
            InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="tab_products"),
            InlineKeyboardButton("üîë –ú–æ–∏ VPN", callback_data="tab_configs")
        ],
        [
            InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data="show_products")
        ],
        [
            InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="show_configs"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")
        ],
        [
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"),
            InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="show_support")
        ]
    ]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
    with app.app_context():
        admin_id_setting = Settings.query.filter_by(key='admin_telegram_id').first()
        if admin_id_setting and admin_id_setting.value:
            try:
                admin_id = int(admin_id_setting.value)
                if user.id == admin_id:
                    buttons.append([InlineKeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])
                    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name} (ID: {user.id}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –±–æ—Ç—É")
            except ValueError:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {admin_id_setting.value}")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        ["üõí –ö—É–ø–∏—Ç—å VPN"],
        ["üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "‚ùì –ü–æ–º–æ—â—å"],
        ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    with app.app_context():
        admin_id_setting = Settings.query.filter_by(key='admin_telegram_id').first()
        if admin_id_setting and admin_id_setting.value:
            try:
                admin_id = int(admin_id_setting.value)
                if user.id == admin_id:
                    keyboard.append(["‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
            except ValueError:
                pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        welcome_message,
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def clear_products_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    global PRODUCTS_CACHE
    
    cache_key = 'active_products'
    if cache_key in PRODUCTS_CACHE:
        del PRODUCTS_CACHE[cache_key]
        return True
    return False

async def get_active_products():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    global PRODUCTS_CACHE
    
    cache_key = 'active_products'
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    if cache_key in PRODUCTS_CACHE:
        products_list, timestamp = PRODUCTS_CACHE[cache_key]
        # –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π (–Ω–µ —Å—Ç–∞—Ä—à–µ CACHE_TTL —Å–µ–∫—É–Ω–¥)
        if current_time - timestamp < CACHE_TTL:
            return products_list
    
    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with app.app_context():
        products = Product.query.filter_by(is_active=True).all()
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        PRODUCTS_CACHE[cache_key] = (products, current_time)
        
        return products

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Display available VPN products/packages"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return ConversationHandler.END
        
    query = update.callback_query
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = await get_active_products()
    
    if not products:
        if query:
            await message.edit_text(
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VPN-–ø–∞–∫–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="tab_main")
                ]])
            )
        else:
            await message.reply_text(
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VPN-–ø–∞–∫–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return ConversationHandler.END
    
    # –®–∞–ø–∫–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tabs = [
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main"),
        InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="tab_products"),
        InlineKeyboardButton("üîë –ú–æ–∏ VPN", callback_data="tab_configs")
    ]
    
    text = "üõí *–î–æ—Å—Ç—É–ø–Ω—ã–µ VPN –ø–∞–∫–µ—Ç—ã:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"
    buttons = []
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    for product in products:
        card = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        card += f"‚îÇ *{product.name}* \n"
        card += "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
        card += f"‚îÇ ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª: {product.config_type.upper()}\n"
        card += "‚îÇ ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        card += "‚îÇ ‚úÖ –¢—Ä–∞—Ñ–∏–∫: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
        card += f"‚îÇ ‚úÖ –°—Ä–æ–∫: {product.duration_days} –¥–Ω–µ–π\n"
        card += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
        card += f"üí∞ –¶–µ–Ω–∞: *{product.price} —Ä—É–±.*\n\n"
        
        text += card
        
        buttons.append([InlineKeyboardButton(
            f"–í—ã–±—Ä–∞—Ç—å {product.name}", 
            callback_data=f"product_{product.id}"
        )])
    
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tab_main")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    buttons.insert(0, tabs)
    
    if query:
        await message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
    else:
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
    
    return SELECTING_PRODUCT

async def product_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle product selection"""
    query = update.callback_query
    await query.answer()
    
    # Extract product_id from callback data
    product_id = int(query.data.split('_')[1])
    context.user_data['selected_product_id'] = product_id
    
    with app.app_context():
        product = Product.query.get(product_id)
        
        if not product:
            await query.message.edit_text(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_products")
                ]])
            )
            return SELECTING_PRODUCT
        
        # Store product info in context
        context.user_data['product_info'] = {
            'id': product.id,
            'name': product.name,
            'price': product.price,
            'duration_days': product.duration_days,
            'config_type': product.config_type
        }
        
        confirmation_text = (
            f"üîç *–î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞:*\n\n"
            f"*{product.name}*\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
            f"–¢–∏–ø: {product.config_type.upper()}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {product.duration_days} –¥–Ω–µ–π\n"
            f"–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?"
        )
        
        await query.message.edit_text(
            confirmation_text,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_purchase"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
                ],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_products")]
            ]),
            parse_mode="Markdown"
        )
        
        return CONFIRMING_PURCHASE

async def confirm_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle purchase confirmation"""
    query = update.callback_query
    await query.answer()
    
    with app.app_context():
        payment_methods = PaymentMethod.query.filter_by(is_active=True).all()
        
        if not payment_methods:
            await query.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_products")
                ]])
            )
            return SELECTING_PRODUCT
        
        payment_text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n"
        buttons = []
        
        for method in payment_methods:
            payment_text += f"‚Ä¢ *{method.name}*: {method.description}\n"
            buttons.append([InlineKeyboardButton(
                method.name, 
                callback_data=f"payment_{method.id}"
            )])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product")])
        
        await query.message.edit_text(
            payment_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
        
        return PAYMENT_METHOD

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle payment method selection and order creation"""
    query = update.callback_query
    await query.answer()
    
    # Extract payment_method_id from callback data
    payment_method_id = int(query.data.split('_')[1])
    
    user = update.effective_user
    product_info = context.user_data.get('product_info')
    
    with app.app_context():
        # Get payment method
        payment_method = PaymentMethod.query.get(payment_method_id)
        
        # Get or create telegram user
        telegram_user = TelegramUser.query.filter_by(telegram_id=user.id).first()
        if not telegram_user:
            telegram_user = TelegramUser(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            db.session.add(telegram_user)
            db.session.commit()
        
        # Create order
        order = Order(
            user_id=telegram_user.id,
            product_id=product_info['id'],
            amount=product_info['price'],
            status='pending'
        )
        db.session.add(order)
        db.session.commit()
        
        # Store order ID in context
        context.user_data['order_id'] = order.id
        
        # Prepare payment instructions
        payment_text = (
            f"üí∞ *–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}*\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{order.amount} —Ä—É–±.*\n"
            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: *{payment_method.name}*\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:\n{payment_method.instructions}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –Ω–∏–∂–µ. "
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à VPN."
        )
        
        await query.message.edit_text(
            payment_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{order.id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
            ]),
            parse_mode="Markdown"
        )
        
        return AWAITING_PAYMENT

async def payment_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle user confirming payment"""
    query = update.callback_query
    await query.answer()
    
    order_id = int(query.data.split('_')[1])
    
    with app.app_context():
        order = Order.query.get(order_id)
        
        if not order:
            await query.message.edit_text(
                "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")
                ]])
            )
            return ConversationHandler.END
        
        # Mark order as awaiting confirmation
        order.status = 'awaiting_confirmation'
        db.session.commit()
        
        # Notify admin about payment (implement this elsewhere)
        
        await query.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ!\n\n"
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ VPN.\n\n"
            "–≠—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤ "
            "(–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫).",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            ]])
        )
        
        user = update.effective_user
        # –û—á–∏—Å—Ç–∏–º –∫—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await clear_user_configs_cache(user.id)
        
        # End the conversation
        return ConversationHandler.END

async def cancel_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel the purchase process"""
    query = update.callback_query
    if query:
        await query.answer()
        await query.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            ]])
        )
    else:
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
    
    # Clean up any order data if needed
    if context.user_data.get('order_id'):
        with app.app_context():
            order = Order.query.get(context.user_data['order_id'])
            if order and order.status == 'pending':
                order.status = 'cancelled'
                db.session.commit()
    
    # Clear user data
    context.user_data.clear()
    
    return ConversationHandler.END

async def clear_user_configs_cache(telegram_id):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global USER_CONFIGS_CACHE
    
    cache_key = f"user_configs_{telegram_id}"
    if cache_key in USER_CONFIGS_CACHE:
        del USER_CONFIGS_CACHE[cache_key]
        return True
    return False

async def get_user_active_configs(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global USER_CONFIGS_CACHE
    
    cache_key = f"user_configs_{telegram_id}"
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    if cache_key in USER_CONFIGS_CACHE:
        configs_list, timestamp = USER_CONFIGS_CACHE[cache_key]
        # –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π (–Ω–µ —Å—Ç–∞—Ä—à–µ CACHE_TTL —Å–µ–∫—É–Ω–¥)
        if current_time - timestamp < CACHE_TTL:
            return configs_list
    
    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with app.app_context():
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        telegram_user = TelegramUser.query.filter_by(telegram_id=telegram_id).first()
        
        if telegram_user:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            configs = VPNConfig.query.filter_by(
                user_id=telegram_user.id,
                is_active=True
            ).all()
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            USER_CONFIGS_CACHE[cache_key] = (configs, current_time)
            
            return configs
        else:
            return None

async def refresh_user_configs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
        
    query = update.callback_query
    await query.answer(text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    await clear_user_configs_cache(user_id)
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ my_configs
    await my_configs(update, context)

async def my_configs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user's active VPN configurations"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
    
    user = update.effective_user
    query = update.callback_query
    
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    with app.app_context():
        telegram_user = TelegramUser.query.filter_by(telegram_id=user.id).first()
        
        if not telegram_user:
            if query:
                await message.edit_text(
                    "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
                )
            else:
                await message.reply_text(
                    "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
                )
            return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    configs = await get_user_active_configs(user.id)
    
    # –®–∞–ø–∫–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tabs = [
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main"),
        InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="tab_products"),
        InlineKeyboardButton("üîë –ú–æ–∏ VPN", callback_data="tab_configs")
    ]
    
    if not configs:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VPN-–¥–æ—Å—Ç—É–ø, –≤—ã–±—Ä–∞–≤ –≤–∫–ª–∞–¥–∫—É ¬´–ü—Ä–æ–¥—É–∫—Ç—ã¬ª."
        
        buttons = [
            tabs,
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data="show_products")]
        ]
        
        if query:
            await message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        else:
            await message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        return
    
    text = "üîë *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:*\n\n"
    buttons = [tabs]  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    for config in configs:
        days_left = (config.valid_until - datetime.utcnow()).days
        expiry_date = config.valid_until.strftime("%d.%m.%Y")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if days_left > 0:
            status_text = "‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
        else:
            status_text = "‚ùå –°—Ç–∞—Ç—É—Å: –ò—Å—Ç–µ–∫"
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        card = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        card += f"‚îÇ *{config.name}* \n"
        card += "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
        card += f"‚îÇ ‚úÖ –¢–∏–ø: {config.config_type.upper()}\n"
        card += f"‚îÇ {status_text}\n"
        card += f"‚îÇ ‚è±Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_date}\n"
        
        if days_left > 0:
            card += f"‚îÇ (–µ—â–µ {days_left} –¥–Ω–µ–π)\n"
        
        card += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        text += card
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if days_left > 0:
            buttons.append([
                InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å", callback_data=f"get_config_{config.id}"),
                InlineKeyboardButton("QR-–∫–æ–¥", callback_data=f"get_qr_{config.id}")
            ])
        else:
            buttons.append([
                InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"renew_config_{config.id}")
            ])
    
    buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_configs")])
    buttons.append([InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data="show_products")])
    
    if query:
        await message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
    else:
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )

async def get_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send the selected VPN configuration to the user"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
        
    query = update.callback_query
    await query.answer()
    
    config_id = int(query.data.split('_')[2])
    
    with app.app_context():
        config = VPNConfig.query.get(config_id)
        
        if not config or not config.is_active:
            await query.message.reply_text(
                "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞."
            )
            return
        
        # Get user data
        user_id = update.effective_user.id
        telegram_user = TelegramUser.query.filter_by(telegram_id=user_id).first()
        
        if not telegram_user or config.user_id != telegram_user.id:
            await query.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            )
            return
        
        # Format and send the configuration
        formatted_config = format_config_for_user(config)
        
        await query.message.reply_text(
            f"üì± *–í–∞—à–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name}*\n\n"
            f"–¢–∏–ø: {config.config_type.upper()}\n"
            f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {config.valid_until.strftime('%d.%m.%Y')}\n\n"
            f"```\n{formatted_config}\n```\n\n"
            f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥.",
            parse_mode="Markdown"
        )
        
        # Generate and send QR code as image (implement this elsewhere)

async def get_qr_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send QR code for VPN configuration"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
        
    query = update.callback_query
    await query.answer()
    
    config_id = int(query.data.split('_')[2])
    
    with app.app_context():
        config = VPNConfig.query.get(config_id)
        
        if not config or not config.is_active:
            await query.message.reply_text(
                "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞."
            )
            return
        
        # Get user data
        user_id = update.effective_user.id
        telegram_user = TelegramUser.query.filter_by(telegram_id=user_id).first()
        
        if not telegram_user or config.user_id != telegram_user.id:
            await query.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è QR-–∫–æ–¥–∞
        await query.message.reply_text(
            f"üîÑ –§—É–Ω–∫—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{config.name}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
        )

async def handle_tab_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
        
    query = update.callback_query
    await query.answer()
    
    tab = query.data.split('_')[1]
    
    if tab == "main":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        await show_main_tab(update, context)
    elif tab == "products":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        await show_products(update, context)
    elif tab == "configs":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        await my_configs(update, context)
    elif tab == "profile":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await show_profile(update, context)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        await show_main_tab(update, context)

async def show_main_tab(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É"""
    query = update.callback_query
    user = update.effective_user
    
    if not query:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query, –∏—Å–ø–æ–ª—å–∑—É–µ–º start
        return await start(update, context)
    
    # –®–∞–ø–∫–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tabs = [
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main"),
        InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="tab_products"),
        InlineKeyboardButton("üîë –ú–æ–∏ VPN", callback_data="tab_configs")
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with app.app_context():
        welcome_setting = Settings.query.filter_by(key='welcome_message').first()
        if welcome_setting and welcome_setting.value:
            welcome_message = welcome_setting.value.replace('{name}', user.first_name)
        else:
            welcome_message = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Shop Bot, {user.first_name}!\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ –±—ã—Å—Ç—Ä—ã–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ "
                "–¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    buttons = [
        tabs,
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data="show_products")],
        [InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="show_configs"),
         InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"),
         InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="show_support")]
    ]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
    with app.app_context():
        admin_id_setting = Settings.query.filter_by(key='admin_telegram_id').first()
        if admin_id_setting and admin_id_setting.value:
            try:
                admin_id = int(admin_id_setting.value)
                if user.id == admin_id:
                    buttons.append([InlineKeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])
            except ValueError:
                pass
    
    await query.message.edit_text(
        welcome_message,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
        
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with app.app_context():
        telegram_user = TelegramUser.query.filter_by(telegram_id=user.id).first()
        
        if not telegram_user:
            await query.message.edit_text(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main")
                ]])
            )
            return
        
        # –®–∞–ø–∫–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        tabs = [
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main"),
            InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="tab_products"),
            InlineKeyboardButton("üîë –ú–æ–∏ VPN", callback_data="tab_configs")
        ]
        
        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        active_configs = VPNConfig.query.filter_by(
            user_id=telegram_user.id,
            is_active=True
        ).count()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤
        orders = Order.query.filter_by(user_id=telegram_user.id).count()
        completed_orders = Order.query.filter_by(
            user_id=telegram_user.id,
            status='completed'
        ).count()
        
        # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        profile_text = (
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
            f"–ò–º—è: {user.first_name}" + (f" {user.last_name}" if user.last_name else "") + "\n"
            f"ID: `{user.id}`\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {telegram_user.registration_date.strftime('%d.%m.%Y')}\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ VPN: {active_configs}\n"
            f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders}\n"
            f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
        )
        
        buttons = [
            tabs,
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data="show_products")],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="show_configs")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main")]
        ]
        
        await query.message.edit_text(
            profile_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send help message"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
        
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ callback_query, —Ç–∞–∫ –∏ –ø—Ä—è–º—É—é –∫–æ–º–∞–Ω–¥—É
    query = update.callback_query
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with app.app_context():
        help_setting = Settings.query.filter_by(key='help_message').first()
        if help_setting and help_setting.value:
            help_text = help_setting.value
        else:
            help_text = (
                "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n"
                "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
                "‚Ä¢ *–ö—É–ø–∏—Ç—å VPN* - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –ø–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞\n"
                "‚Ä¢ *–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ *–ü—Ä–æ—Ñ–∏–ª—å* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                "‚Ä¢ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞* - —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é."
            )
    
    # –®–∞–ø–∫–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tabs = [
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main"),
        InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="tab_products"),
        InlineKeyboardButton("üîë –ú–æ–∏ VPN", callback_data="tab_configs")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        tabs,
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data="show_products")],
        [InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="show_configs")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tab_main")]
    ]
    
    if query:
        await message.edit_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
    else:
        await message.reply_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle support request"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_blocked(update):
        return
        
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ callback_query, —Ç–∞–∫ –∏ –ø—Ä—è–º—É—é –∫–æ–º–∞–Ω–¥—É
    query = update.callback_query
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with app.app_context():
        support_setting = Settings.query.filter_by(key='support_message').first()
        admin_contact = Settings.query.filter_by(key='admin_contact').first()
        
        admin_username = "@admin"
        if admin_contact and admin_contact.value:
            admin_username = admin_contact.value
            
        if support_setting and support_setting.value:
            support_text = support_setting.value.replace('{admin}', admin_username)
        else:
            support_text = (
                "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VPN, "
                f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_username}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, "
                f"–≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
            )
    
    # –®–∞–ø–∫–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tabs = [
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="tab_main"),
        InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="tab_products"),
        InlineKeyboardButton("üîë –ú–æ–∏ VPN", callback_data="tab_configs")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    buttons = [
        tabs,
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tab_main")]
    ]
    
    if query:
        await message.edit_text(
            support_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
    else:
        await message.reply_text(
            support_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    query = update.callback_query
    
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    with app.app_context():
        admin_id_setting = Settings.query.filter_by(key='admin_telegram_id').first()
        is_admin = False
        
        if admin_id_setting and admin_id_setting.value:
            try:
                admin_id = int(admin_id_setting.value)
                is_admin = (user.id == admin_id)
            except ValueError:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {admin_id_setting.value}")
        
        if not is_admin:
            if query:
                await message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
            else:
                await message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_text = (
            "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        
        buttons = [
            [InlineKeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_new")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_refresh_configs")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tab_main")]
        ]
        
        if query:
            await message.edit_text(
                admin_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
        else:
            await message.reply_text(
                admin_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )

async def admin_confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    with app.app_context():
        admin_id_setting = Settings.query.filter_by(key='admin_telegram_id').first()
        is_admin = False
        
        if admin_id_setting and admin_id_setting.value:
            try:
                admin_id = int(admin_id_setting.value)
                is_admin = (user.id == admin_id)
            except ValueError:
                pass
        
        if not is_admin:
            await query.message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(query.data.split('_')[3])
        order = Order.query.get(order_id)
        
        if not order:
            await query.message.edit_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders_new")
                ]])
            )
            return
        
        if order.status != 'awaiting_confirmation':
            await query.message.edit_text(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {order.status}.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders_new")
                ]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–µ
        telegram_user = TelegramUser.query.get(order.user_id)
        product = Product.query.get(order.product_id)
        
        if not telegram_user or not product:
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders_new")
                ]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        valid_until = datetime.utcnow() + timedelta(days=product.duration_days)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –∫ XUI API)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            server_address = Settings.query.filter_by(key='vpn_server_address').first()
            server_address = server_address.value if server_address else "127.0.0.1"
            
            server_port = Settings.query.filter_by(key='vpn_server_port').first()
            server_port = int(server_port.value) if server_port else 443
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_name = f"{product.name} - {telegram_user.first_name}"
            user_email = f"{telegram_user.telegram_id}@vpntgbot.com"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã
            config_data = generate_config(
                config_type=product.config_type,
                user_email=user_email,
                server_address=server_address,
                server_port=server_port
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π config_data –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            config_data_str = str(config_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            vpn_config = VPNConfig(
                user_id=telegram_user.id,
                config_type=product.config_type,
                name=config_name,
                config_data=config_data_str,
                valid_until=valid_until,
                is_active=True
            )
            db.session.add(vpn_config)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
            order.status = 'completed'
            order.paid_at = datetime.utcnow()
            order.config_id = vpn_config.id
            
            db.session.commit()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            loop = asyncio.get_event_loop()
            loop.create_task(clear_user_configs_cache(telegram_user.telegram_id))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            confirmation_message = Settings.query.filter_by(key='payment_confirmation_message').first()
            if confirmation_message and confirmation_message.value:
                notification_text = confirmation_message.value
            else:
                notification_text = (
                    "‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n"
                    f"–ó–∞–∫–∞–∑ #{order.id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                    f"–í–∞—à–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {valid_until.strftime('%d.%m.%Y')}.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–∞—à—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏¬ª."
                )
            
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ application
            # –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π
            
            # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            await query.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"–°–æ–∑–¥–∞–Ω–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user.first_name}.\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {valid_until.strftime('%d.%m.%Y')}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_new")],
                    [InlineKeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")]
                ])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            await query.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders_new")
                ]])
            )
            import traceback
            logger.error(traceback.format_exc())

async def admin_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    if query:
        await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    with app.app_context():
        admin_id_setting = Settings.query.filter_by(key='admin_telegram_id').first()
        is_admin = False
        
        if admin_id_setting and admin_id_setting.value:
            try:
                admin_id = int(admin_id_setting.value)
                is_admin = (user.id == admin_id)
            except ValueError:
                pass
        
        if not is_admin:
            if query:
                await query.message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
            else:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        new_orders = Order.query.filter_by(status='awaiting_confirmation').all()
        
        if not new_orders:
            text = "üìã *–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã*\n\n–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            buttons = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
            
            if query:
                await query.message.edit_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="Markdown"
                )
            return
        
        text = "üìã *–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n"
        buttons = []
        
        for order in new_orders:
            user = TelegramUser.query.get(order.user_id)
            product = Product.query.get(order.product_id)
            
            if user and product:
                text += f"üîπ *–ó–∞–∫–∞–∑ #{order.id}*\n"
                text += f"  ‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})\n"
                text += f"  ‚îú –ü—Ä–æ–¥—É–∫—Ç: {product.name}\n"
                text += f"  ‚îú –°—É–º–º–∞: {order.amount} —Ä—É–±.\n"
                text += f"  ‚îî –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                buttons.append([InlineKeyboardButton(
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ #{order.id}",
                    callback_data=f"admin_confirm_order_{order.id}"
                )])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        
        if query:
            await query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )

async def handle_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle text button presses from the main menu"""
    text = update.message.text
    
    if text == "üõí –ö—É–ø–∏—Ç—å VPN":
        return await show_products(update, context)
    elif text == "üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏":
        return await my_configs(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        return await support(update, context)
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        # For text buttons that call functions expecting callback queries,
        # we'll directly adjust behavior within those functions rather than
        # creating a mock callback_query object
        # Return to start command to use the inline keyboard instead
        return await start(update, context)
    elif text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        return await admin_panel(update, context)

def setup_bot():
    """Initialize and start the Telegram bot"""
    # Get the token from environment variable
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.warning("TELEGRAM_BOT_TOKEN environment variable is not set! Bot will not start.")
        return None
    
    logger.info(f"Setting up Telegram bot with token: {token[:5]}...{token[-5:] if len(token) > 10 else '***'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot...")
    try:
        from telegram import __version__
        logger.info(f"–í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot: {__version__}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot: {e}")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        # –î–ª—è python-telegram-bot v20+ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        async def run_bot_async():
            try:
                logger.info("Initializing Telegram application...")
                # Build the application
                logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Application...")
                application = Application.builder().token(token).build()
                logger.info("Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
                # Add handlers
                application.add_handler(CommandHandler("start", start))
                application.add_handler(CommandHandler("help", help_command))
                application.add_handler(CommandHandler("support", support))
                logger.info("–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                
                logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –ø–æ–∫—É–ø–∫–∏...")
                # Purchase conversation handler
                purchase_handler = ConversationHandler(
                    entry_points=[
                        CommandHandler("buy", show_products),
                        MessageHandler(filters.Text(["üõí –ö—É–ø–∏—Ç—å VPN"]), show_products),
                        CallbackQueryHandler(show_products, pattern="^back_to_products$")
                    ],
                    states={
                        SELECTING_PRODUCT: [
                            CallbackQueryHandler(product_selected, pattern="^product_"),
                            CallbackQueryHandler(cancel_purchase, pattern="^cancel$"),
                            CallbackQueryHandler(show_products, pattern="^back_to_products$")
                        ],
                        CONFIRMING_PURCHASE: [
                            CallbackQueryHandler(confirm_purchase, pattern="^confirm_purchase$"),
                            CallbackQueryHandler(show_products, pattern="^back_to_products$"),
                            CallbackQueryHandler(product_selected, pattern="^back_to_product$"),
                            CallbackQueryHandler(cancel_purchase, pattern="^cancel$")
                        ],
                        PAYMENT_METHOD: [
                            CallbackQueryHandler(process_payment, pattern="^payment_"),
                            CallbackQueryHandler(product_selected, pattern="^back_to_product$"),
                            CallbackQueryHandler(cancel_purchase, pattern="^cancel$")
                        ],
                        AWAITING_PAYMENT: [
                            CallbackQueryHandler(payment_confirmed, pattern="^paid_"),
                            CallbackQueryHandler(cancel_purchase, pattern="^cancel_payment$")
                        ]
                    },
                    fallbacks=[
                        CommandHandler("cancel", cancel_purchase),
                        CallbackQueryHandler(cancel_purchase, pattern="^cancel$")
                    ],
                    name="purchase_conversation",
                    persistent=False
                )
                
                application.add_handler(purchase_handler)
                
                # Tab navigation handlers
                application.add_handler(CallbackQueryHandler(handle_tab_navigation, pattern="^tab_"))
                application.add_handler(CallbackQueryHandler(show_profile, pattern="^show_profile$"))
                application.add_handler(CallbackQueryHandler(show_main_tab, pattern="^start$"))
                
                # Config management handlers
                application.add_handler(CommandHandler("configs", my_configs))
                application.add_handler(CallbackQueryHandler(get_config, pattern="^get_config_"))
                application.add_handler(CallbackQueryHandler(get_qr_code, pattern="^get_qr_"))
                application.add_handler(CallbackQueryHandler(my_configs, pattern="^show_configs$"))
                application.add_handler(CallbackQueryHandler(refresh_user_configs, pattern="^refresh_configs$"))
                
                # Helper handlers
                application.add_handler(CallbackQueryHandler(help_command, pattern="^show_help$"))
                application.add_handler(CallbackQueryHandler(support, pattern="^show_support$"))
                application.add_handler(CallbackQueryHandler(show_products, pattern="^show_products$"))
                
                # Admin handlers
                application.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
                application.add_handler(CallbackQueryHandler(admin_orders, pattern="^admin_orders_new$"))
                application.add_handler(CallbackQueryHandler(admin_confirm_order, pattern="^admin_confirm_order_"))
                
                # Handle text buttons
                application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_buttons))
                
                logger.info("Starting Telegram bot polling...")
                # Start the bot asynchronously with retry logic
                try:
                    logger.info("Initializing bot application...")
                    await application.initialize()
                    logger.info("Starting bot application...")
                    await application.start()
                    logger.info("Starting updater polling...")
                    await application.updater.start_polling(
                        allowed_updates=Update.ALL_TYPES,
                        read_timeout=30,
                        connect_timeout=30,
                        pool_timeout=30
                    )
                    logger.info("Telegram bot polling started successfully")
                except telegram.error.TimedOut:
                    logger.error("Timed out connecting to Telegram API. Possible network issues or invalid token.")
                    # Return gracefully to allow for restart
                    return None
                except telegram.error.InvalidToken:
                    logger.error("Invalid Telegram bot token. Please check your token.")
                    return None
                except Exception as e:
                    logger.error(f"Error starting bot polling: {e}")
                    import traceback
                    logger.error(f"Polling error details:\n{traceback.format_exc()}")
                    return None
                
                # Keep the bot running
                while True:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.error(f"Error in Telegram bot: {e}")
                import traceback
                logger.error(f"Bot error details:\n{traceback.format_exc()}")
                return None
            finally:
                # Graceful shutdown
                logger.info("Shutting down bot...")
                try:
                    if 'application' in locals():
                        await application.updater.stop()
                        await application.stop()
                        await application.shutdown()
                except Exception as e:
                    logger.error(f"Error during bot shutdown: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –Ω–æ–≤—ã–º event loop
        def run_bot_thread():
            try:
                import asyncio
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ main.py
                from main import bot_event_loop
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ event loop –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ admin_panel.py)
                import main
                main.bot_event_loop = loop
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —ç—Ç–æ–º loop
                loop.run_until_complete(run_bot_async())
            except Exception as e:
                logger.error(f"Error in bot thread: {e}")
                import traceback
                logger.error(f"Bot thread error details:\n{traceback.format_exc()}")
        
        import threading
        import asyncio
        logger.info("Creating bot thread...")
        bot_thread = threading.Thread(target=run_bot_thread, name="TelegramBotThread")
        bot_thread.daemon = True  # –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Ç–æ–∫, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        bot_thread.start()
        logger.info(f"Telegram bot started in thread ID: {bot_thread.ident}")
        return bot_thread
        
    except Exception as e:
        logger.error(f"Error setting up Telegram bot: {e}")
        import traceback
        logger.error(f"Bot setup error details:\n{traceback.format_exc()}")
        return None
