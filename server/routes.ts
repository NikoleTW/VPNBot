import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { db } from "./db";
import { storage } from "./storage";
import { insertUserSchema, insertProductSchema, insertOrderSchema, insertVpnConfigSchema, admins, type Product, type VpnConfig } from "@shared/schema";
import { z } from "zod";
import TelegramBot from "node-telegram-bot-api";
import Stripe from "stripe";
import { eq } from "drizzle-orm";
import crypto from "crypto";

// Helper function to convert order status to readable text
function getOrderStatusText(status: string): string {
  switch(status) {
    case 'pending': return '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
    case 'awaiting_confirmation': return 'üîç –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    case 'completed': return '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω';
    case 'cancelled': return '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
    default: return status;
  }
}

// Initialize Stripe
const stripeSecretKey = process.env.STRIPE_SECRET_KEY;
let stripe: Stripe | undefined;

if (!stripeSecretKey) {
  console.error("Missing Stripe secret key (STRIPE_SECRET_KEY)");
} else {
  try {
    stripe = new Stripe(stripeSecretKey, {
      apiVersion: "2025-03-31.basil",
    });
    console.log("Stripe initialized successfully");
  } catch (error) {
    console.error("Failed to initialize Stripe:", error);
  }
}

// Initialize Telegram Bot
let bot: TelegramBot | undefined;

async function initBot() {
  const setting = await storage.getSetting("telegram_bot_token");
  const token = setting?.value;
  
  if (token && token.length > 0) {
    try {
      if (bot) {
        bot.stopPolling();
      }
      
      bot = new TelegramBot(token, { polling: true });
      setupBotHandlers(bot);
      return true;
    } catch (error) {
      console.error("Failed to initialize Telegram bot:", error);
      return false;
    }
  }
  return false;
}

function setupBotHandlers(bot: TelegramBot) {
  // Register bot commands
  bot.setMyCommands([
    { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
    { command: "help", description: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å" },
    { command: "products", description: "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã" },
    { command: "my_configs", description: "–ú–æ–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" },
    { command: "support", description: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π" },
  ]);
  // Helper function to show product carousel
  async function showProductCarousel(chatId: number | string, products: Product[], currentIndex: number) {
    if (products.length === 0) return;
    
    const product = products[currentIndex];
    const productPrice = (product.price / 100).toFixed(2);
    
    // Get protocol icon
    let protocolIcon = '';
    switch (product.configType.toLowerCase()) {
      case 'vless':
        protocolIcon = 'üü†';
        break;
      case 'vmess':
        protocolIcon = 'üü£';
        break;
      case 'trojan':
        protocolIcon = 'üîµ';
        break;
      default:
        protocolIcon = '‚ö´';
    }
    
    // Create beautiful product card message
    let message = `*${product.name}*\n\n`;
    message += `${protocolIcon} *–ü—Ä–æ—Ç–æ–∫–æ–ª:* ${product.configType.toUpperCase()}\n`;
    message += `‚è± *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* ${product.durationDays} –¥–Ω–µ–π\n`;
    message += `üí∞ *–¶–µ–Ω–∞:* ${productPrice} —Ä—É–±.\n\n`;
    message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${product.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n`;
    message += `üî¢ *–ù–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞:* ${currentIndex + 1}/${products.length}`;
    
    const isUserAdmin = await isAdmin(chatId.toString());
    
    // Create keyboard with pagination and buy button
    const keyboard = [];
    
    // Navigation row
    const navigationRow = [];
    if (currentIndex > 0) {
      navigationRow.push({ text: "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data: `product_show_${currentIndex - 1}` });
    }
    if (currentIndex < products.length - 1) {
      navigationRow.push({ text: "–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data: `product_show_${currentIndex + 1}` });
    }
    if (navigationRow.length > 0) {
      keyboard.push(navigationRow);
    }
    
    // Buy and share buttons
    if (isUserAdmin) {
      keyboard.push([
        { text: "üîë –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (—Ç–µ—Å—Ç)", callback_data: `product_free_${product.id}` }
      ]);
    }
    
    keyboard.push([
      { text: "üõí –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data: `product_buy_${product.id}` },
      { text: "üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data: `product_share_${product.id}` }
    ]);
    
    // Send message with product card (using text message instead of photo to avoid external URL issues)
    await bot.sendMessage(chatId, `üîê *${product.name}*\n\n${message}`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }
  
  // Helper function to generate random VPN config (for testing)
  async function generateRandomVpnConfig(userId: number, productId: number): Promise<VpnConfig> {
    const product = await storage.getProduct(productId);
    if (!product) {
      throw new Error("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const user = await storage.getUser(userId);
    if (!user) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // Generate random configuration data based on product type
    const configType = product.configType.toLowerCase();
    const uuid = crypto.randomUUID();
    const now = new Date();
    const validUntil = new Date(now.getTime() + product.durationDays * 24 * 60 * 60 * 1000);
    
    let configData = '';
    const serverAddress = '123.123.123.123'; // Placeholder server address
    
    if (configType === 'vless') {
      configData = `vless://${uuid}@${serverAddress}:443?encryption=none&security=tls&sni=example.com&type=ws&host=example.com&path=%2Fvless#${encodeURIComponent(`${user.username || user.firstName}-${product.name}`)}`;
    } else if (configType === 'vmess') {
      const vmessConfig = {
        v: '2',
        ps: `${user.username || user.firstName}-${product.name}`,
        add: serverAddress,
        port: '443',
        id: uuid,
        aid: '0',
        net: 'ws',
        type: 'none',
        host: 'example.com',
        path: '/vmess',
        tls: 'tls',
        sni: 'example.com'
      };
      configData = 'vmess://' + Buffer.from(JSON.stringify(vmessConfig)).toString('base64');
    } else if (configType === 'trojan') {
      configData = `trojan://${uuid}@${serverAddress}:443?security=tls&sni=example.com&type=ws&host=example.com&path=%2Ftrojan#${encodeURIComponent(`${user.username || user.firstName}-${product.name}`)}`;
    } else {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${configType}`);
    }
    
    // Create VPN configuration
    const vpnConfig = await storage.createVpnConfig({
      userId: userId,
      configType: configType,
      name: `${product.name} (${configType.toUpperCase()})`,
      configData: configData,
      validUntil: validUntil,
      isActive: true,
      xUiClientId: Math.floor(Math.random() * 1000000) // Random client ID
    });
    
    return vpnConfig;
  }
  
  // Check if user is an admin
  async function isAdmin(telegramId: string): Promise<boolean> {
    const adminIdsSetting = await storage.getSetting("telegram_admin_ids");
    if (!adminIdsSetting || !adminIdsSetting.value) return false;
    
    const adminIds = adminIdsSetting.value.split(',').map(id => id.trim());
    return adminIds.includes(telegramId);
  }
  
  // Handle /admin command for administrators
  bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    // Check if user is admin
    if (!(await isAdmin(telegramId))) {
      bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
      return;
    }
    
    // Get statistics for quick overview
    const users = await storage.getAllUsers();
    const activeUsers = users.filter(user => !user.isBlocked).length;
    
    const orders = await storage.getAllOrders();
    const pendingOrders = orders.filter(order => order.status === 'pending' || order.status === 'awaiting_confirmation').length;
    
    let adminMessage = "üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n";
    adminMessage += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers})\n`;
    adminMessage += `üõçÔ∏è –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${pendingOrders}\n\n`;
    adminMessage += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
    
    bot.sendMessage(chatId, adminMessage, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data: "admin_users" }],
          [{ text: "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data: "admin_message" }],
          [{ text: "üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "admin_stats" }],
          [{ text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data: "admin_settings" }]
        ]
      }
    });
    
    // Also update the user's keyboard with the admin button
    const keyboardButtons = [
      [{ text: "üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã" }, { text: "üîê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }, { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }],
      [{ text: "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" }]
    ];
    
    bot.sendMessage(chatId, "–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∏–∂–µ.", {
      reply_markup: {
        keyboard: keyboardButtons,
        resize_keyboard: true
      }
    });
  });
  
  // Handle /start command
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    const firstName = msg.from?.first_name || '';
    const lastName = msg.from?.last_name || '';
    const username = msg.from?.username || telegramId || '';
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    // Check if user exists
    let user = await storage.getUserByTelegramId(telegramId);
    
    // Create user if not exists
    if (!user) {
      user = await storage.createUser({
        telegramId,
        username,
        firstName,
        lastName,
        isBlocked: false,
        registrationDate: new Date()
      });
    }
    
    // Send welcome message
    const welcomeSetting = await storage.getSetting("welcome_message");
    const welcomeMessage = welcomeSetting?.value || "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!";
    
    // Check if user is admin and add admin button if needed
    const isUserAdmin = await isAdmin(telegramId);
    const keyboardButtons = [
      [{ text: "üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã" }, { text: "üîê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }, { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }]
    ];
    
    if (isUserAdmin) {
      keyboardButtons.push([{ text: "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" }]);
    }
    
    bot.sendMessage(chatId, welcomeMessage, {
      reply_markup: {
        keyboard: keyboardButtons,
        resize_keyboard: true
      }
    });
  });
  
  // Handle "–ü—Ä–æ–¥—É–∫—Ç—ã" button
  bot.onText(/üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await storage.getUserByTelegramId(telegramId);
    if (user?.isBlocked) {
      bot.sendMessage(chatId, "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }
    
    const products = await storage.getActiveProducts();
    
    if (products.length === 0) {
      bot.sendMessage(chatId, "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    await bot.sendMessage(chatId, "üî∞ *–ù–∞—à–∏ VPN-—Ç–∞—Ä–∏—Ñ—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", {
      parse_mode: "Markdown"
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    await showProductCarousel(chatId, products, 0);
  });
  
  // Handle product selection (number input)
  bot.onText(/^[1-9]\d*$/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    const productNumber = parseInt(msg.text || "0", 10);
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await storage.getUserByTelegramId(telegramId);
    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }
    
    if (user.isBlocked) {
      bot.sendMessage(chatId, "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }
    
    const products = await storage.getActiveProducts();
    
    if (productNumber <= 0 || productNumber > products.length) {
      return; // Not a valid product number
    }
    
    const selectedProduct = products[productNumber - 1];
    
    // Create pending order
    const order = await storage.createOrder({
      userId: user.id,
      productId: selectedProduct.id,
      amount: selectedProduct.price,
      status: "pending"
    });
    
    // Format payment instructions
    const productPrice = (selectedProduct.price / 100).toFixed(2);
    
    // Get payment info from settings
    const paymentInfoSetting = await storage.getSetting("payment_info");
    const paymentInfo = paymentInfoSetting?.value || "1. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: 5000 0000 0000 0000\n2. –°–ë–ü –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 (999) 000-00-00";
    
    let message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
    message += `–ü—Ä–æ–¥—É–∫—Ç: ${selectedProduct.name}\n`;
    message += `–¶–µ–Ω–∞: ${productPrice} —Ä—É–±.\n\n`;
    message += "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n";
    message += paymentInfo + "\n\n";
    message += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.";
    
    bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data: `payment_${order.id}` }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: `cancel_${order.id}` }]
        ]
      }
    });
  });
  
  // Handle callback queries
  bot.on("callback_query", async (query) => {
    if (!query.data || !query.message) return;
    
    const chatId = query.message.chat.id;
    const telegramId = query.from.id.toString();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
    if (!query.data.startsWith('admin_')) {
      const user = await storage.getUserByTelegramId(telegramId);
      if (user?.isBlocked) {
        bot.answerCallbackQuery(query.id, {
          text: "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
        });
        return;
      }
    }
    
    // Handle help menu buttons
    if (query.data === "help_products") {
      // –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
      bot.answerCallbackQuery(query.id);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
      const products = await storage.getActiveProducts();
      
      if (products.length === 0) {
        bot.sendMessage(chatId, "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
      await bot.sendMessage(chatId, "üî∞ *–ù–∞—à–∏ VPN-—Ç–∞—Ä–∏—Ñ—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", {
        parse_mode: "Markdown"
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      await showProductCarousel(chatId, products, 0);
      return;
    }
    
    if (query.data === "help_configs") {
      // –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
      bot.answerCallbackQuery(query.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const configs = await storage.getUserVpnConfigs(user.id);
      const activeConfigs = configs.filter(config => {
        const now = new Date();
        return config.isActive && config.validUntil > now;
      });
      
      if (activeConfigs.length === 0) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã¬ª.");
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
      let message = "üîê *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏*\n\n";
      activeConfigs.forEach((config, index) => {
        const validUntil = new Date(config.validUntil).toLocaleDateString('ru-RU');
        const daysLeft = Math.ceil((config.validUntil.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
        
        message += `*${index + 1}. ${config.name}*\n`;
        message += `üü¢ –¢–∏–ø: ${config.configType.toUpperCase()}\n`;
        message += `‚è± –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${validUntil} (${daysLeft} –¥–Ω.)\n\n`;
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const keyboard = activeConfigs.map((config, index) => [
        { text: `–°–∫–∞—á–∞—Ç—å ${config.name}`, callback_data: `config_${config.id}` },
        { text: `QR-–∫–æ–¥ –¥–ª—è ${config.name}`, callback_data: `qr_${config.id}` }
      ]);
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      return;
    }
    
    if (query.data === "help_profile") {
      // –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
      bot.answerCallbackQuery(query.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
      const orders = await storage.getUserOrders(user.id);
      const configs = await storage.getUserVpnConfigs(user.id);
      
      const activeConfigs = configs.filter(config => {
        const now = new Date();
        return config.isActive && config.validUntil > now;
      });
      
      // Count completed orders
      const completedOrders = orders.filter(order => order.status === 'completed').length;
      const pendingOrders = orders.filter(order => order.status === 'pending' || order.status === 'awaiting_confirmation').length;
      
      // Calculate total spent
      const totalSpent = orders
        .filter(order => order.status === 'completed')
        .reduce((sum, order) => sum + order.amount, 0) / 100;
      
      let message = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
      message += `üìã *–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
      message += `–ò–º—è: ${user.firstName} ${user.lastName || ''}\n`;
      message += `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${user.username}\n`;
      message += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registrationDate.toLocaleDateString()}\n\n`;
      
      message += `üõí *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:*\n`;
      message += `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}\n`;
      message += `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedOrders}\n`;
      message += `–û–∂–∏–¥–∞—é—â–∏—Ö: ${pendingOrders}\n`;
      message += `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent.toFixed(2)} —Ä—É–±.\n\n`;
      
      message += `üîê *VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:*\n`;
      message += `–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${configs.length}\n`;
      message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${activeConfigs.length}\n\n`;
      
      message += `üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*\n`;
      message += `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å VPN, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`;
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìÆ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data: "contact_support" }],
            [{ text: "üì¶ –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data: "show_products" }]
          ]
        }
      });
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    if (query.data === "contact_support") {
      bot.answerCallbackQuery(query.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const supportContactSetting = await storage.getSetting("support_contact");
      const supportContact = supportContactSetting?.value || "@support_username"; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      
      let message = `üìû *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n`;
      message += `–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VPN-—Å–µ—Ä–≤–∏—Å–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n\n`;
      message += `‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: ${supportContact}\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n\n`;
      message += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à ID –≤ —Å–∏—Å—Ç–µ–º–µ: \`${telegramId}\``;
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown"
      });
      return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç)
    if (query.data === "show_products") {
      bot.answerCallbackQuery(query.id);
      
      const products = await storage.getActiveProducts();
      
      if (products.length === 0) {
        bot.sendMessage(chatId, "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
      await bot.sendMessage(chatId, "üî∞ *–ù–∞—à–∏ VPN-—Ç–∞—Ä–∏—Ñ—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", {
        parse_mode: "Markdown"
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      await showProductCarousel(chatId, products, 0);
      return;
    }
    
    // Handle navigation between product carousel pages
    if (query.data.startsWith("product_show_")) {
      const showIndex = parseInt(query.data.split("_")[2], 10);
      
      const products = await storage.getActiveProducts();
      if (showIndex >= 0 && showIndex < products.length) {
        // Clear the previous message
        await bot.deleteMessage(chatId, query.message.message_id);
        // Show the new product
        await showProductCarousel(chatId, products, showIndex);
      }
      
      return;
    }
    
    // Handle free product testing (admin only)
    if (query.data.startsWith("product_free_")) {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.answerCallbackQuery(query.id, {
          text: "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
          show_alert: true
        });
        return;
      }
      
      const productId = parseInt(query.data.split("_")[2], 10);
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        bot.answerCallbackQuery(query.id, {
          text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
          show_alert: true
        });
        return;
      }
      
      try {
        // Create order record
        const product = await storage.getProduct(productId);
        
        if (!product) {
          bot.answerCallbackQuery(query.id, {
            text: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            show_alert: true
          });
          return;
        }
        
        const order = await storage.createOrder({
          userId: user.id,
          productId: product.id,
          amount: 0, // Free for testing
          status: "completed"
        });
        
        // Generate random VPN config
        const vpnConfig = await generateRandomVpnConfig(user.id, productId);
        
        // Associate config with order
        await storage.updateOrderConfig(order.id, vpnConfig.id);
        
        // Send confirmation to admin
        const configType = vpnConfig.configType.toUpperCase();
        const validUntil = new Date(vpnConfig.validUntil).toLocaleDateString('ru-RU');
        
        let message = `‚úÖ *–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ*\n\n`;
        message += `üîë *ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:* ${vpnConfig.id}\n`;
        message += `üìã *–¢–∏–ø:* ${configType}\n`;
        message += `üìÖ *–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ:* ${validUntil}\n\n`;
        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_configs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.`;
        
        bot.sendMessage(chatId, message, {
          parse_mode: "Markdown"
        });
        
      } catch (error: any) {
        bot.answerCallbackQuery(query.id, {
          text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`,
          show_alert: true
        });
      }
      
      return;
    }
    
    // Handle product sharing
    if (query.data.startsWith("product_share_")) {
      const productId = parseInt(query.data.split("_")[2], 10);
      const product = await storage.getProduct(productId);
      
      if (!product) {
        bot.answerCallbackQuery(query.id, {
          text: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
          show_alert: true
        });
        return;
      }
      
      const botSetting = await storage.getSetting("telegram_bot_link");
      const botLink = botSetting?.value || "https://t.me/your_bot";
      
      const productPrice = (product.price / 100).toFixed(2);
      let protocolIcon = '';
      switch (product.configType.toLowerCase()) {
        case 'vless': protocolIcon = 'üü†'; break;
        case 'vmess': protocolIcon = 'üü£'; break;
        case 'trojan': protocolIcon = 'üîµ'; break;
        default: protocolIcon = '‚ö´';
      }
      
      // Create sharable message
      let message = `üíé *${product.name}*\n\n`;
      message += `${protocolIcon} *–ü—Ä–æ—Ç–æ–∫–æ–ª:* ${product.configType.toUpperCase()}\n`;
      message += `‚è± *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* ${product.durationDays} –¥–Ω–µ–π\n`;
      message += `üí∞ *–¶–µ–Ω–∞:* ${productPrice} —Ä—É–±.\n\n`;
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${product.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n`;
      message += `üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –∫—É–ø–∏—Ç—å: ${botLink}`;
      
      // Send as a separate message that can be forwarded (using text message instead of photo)
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown'
      });
      
      bot.answerCallbackQuery(query.id, {
        text: "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
      });
      
      return;
    }
    
    // Handle direct purchase
    if (query.data.startsWith("product_buy_")) {
      const productId = parseInt(query.data.split("_")[2], 10);
      
      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) {
        bot.answerCallbackQuery(query.id, {
          text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
          show_alert: true
        });
        return;
      }
      
      const product = await storage.getProduct(productId);
      if (!product) {
        bot.answerCallbackQuery(query.id, {
          text: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
          show_alert: true
        });
        return;
      }
      
      // Create pending order
      const order = await storage.createOrder({
        userId: user.id,
        productId: product.id,
        amount: product.price,
        status: "pending"
      });
      
      // Format payment instructions
      const productPrice = (product.price / 100).toFixed(2);
      
      // Get payment info from settings
      const paymentInfoSetting = await storage.getSetting("payment_info");
      const paymentInfo = paymentInfoSetting?.value || "1. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: 5000 0000 0000 0000\n2. –°–ë–ü –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 (999) 000-00-00";
      
      let message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
      message += `–ü—Ä–æ–¥—É–∫—Ç: ${product.name}\n`;
      message += `–¶–µ–Ω–∞: ${productPrice} —Ä—É–±.\n\n`;
      message += "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n";
      message += paymentInfo + "\n\n";
      message += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.";
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data: `payment_${order.id}` }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: `cancel_${order.id}` }]
          ]
        }
      });
      
      return;
    }
    
    // Admin panel features
    if (query.data === "admin_users") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      // Get all users
      const users = await storage.getAllUsers();
      
      if (users.length === 0) {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        return;
      }
      
      // Show first page of users (10 users)
      const pageSize = 10;
      let message = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n";
      
      const displayUsers = users.slice(0, pageSize);
      displayUsers.forEach((user, index) => {
        message += `${index + 1}. ${user.firstName} ${user.lastName || ''} (@${user.username})\n`;
        message += `   ID: ${user.id} | Telegram ID: ${user.telegramId}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${user.isBlocked ? 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n`;
      });
      
      const totalUsers = users.length;
      const totalPages = Math.ceil(totalUsers / pageSize);
      message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ ${totalPages} (–≤—Å–µ–≥–æ ${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`;
      
      const keyboard = displayUsers.map(user => [
        { 
          text: `${user.isBlocked ? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} ${user.firstName}`, 
          callback_data: `admin_toggle_block_${user.id}_${user.isBlocked ? 'unblock' : 'block'}` 
        },
        { 
          text: `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${user.firstName}`, 
          callback_data: `admin_message_user_${user.id}` 
        }
      ]);
      
      // Add navigation buttons if needed
      if (totalPages > 1) {
        keyboard.push([
          { text: "‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data: "admin_users_prev_0" },
          { text: "–°–ª–µ–¥. ‚û°Ô∏è", callback_data: "admin_users_next_2" }
        ]);
      }
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } else if (query.data.startsWith("admin_toggle_block_")) {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      const parts = query.data.split("_");
      const userId = parseInt(parts[3], 10);
      const action = parts[4]; // 'block' or 'unblock'
      
      const user = await storage.getUser(userId);
      if (!user) {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // Toggle block status
      const isBlocked = action === 'block';
      await storage.blockUser(userId, isBlocked);
      
      // Notify admin
      bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} ${user.lastName || ''} (@${user.username}) ${isBlocked ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}.`);
      
      // Notify user
      if (user.telegramId) {
        const message = isBlocked
          ? "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
          : "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.";
        
        bot.sendMessage(user.telegramId, message);
      }
    } else if (query.data === "admin_message") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      // Show message options
      bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data: "admin_message_all" }],
            [{ text: "üîç –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data: "admin_users" }]
          ]
        }
      });
    } else if (query.data === "admin_message_all") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      // Set up context for admin to send broadcast message
      bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", {
        reply_markup: {
          force_reply: true
        }
      }).then(sentMsg => {
        // Add listener for the next message from this admin
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
          const messageText = msg.text;
          
          if (!messageText) {
            bot.sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
          }
          
          // Send to all users
          const users = await storage.getAllUsers();
          const activeUsers = users.filter(user => !user.isBlocked && user.telegramId);
          
          let successCount = 0;
          let failCount = 0;
          
          // Send message with progress updates
          const progressMsg = await bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...");
          
          for (let i = 0; i < activeUsers.length; i++) {
            const user = activeUsers[i];
            if (user.telegramId) {
              try {
                await bot.sendMessage(user.telegramId, `*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n${messageText}`, {
                  parse_mode: "Markdown"
                });
                successCount++;
                
                // Update progress every 5 users or at the end
                if (i % 5 === 0 || i === activeUsers.length - 1) {
                  await bot.editMessageText(
                    `–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π... ${i + 1} –∏–∑ ${activeUsers.length} (${successCount} —É—Å–ø–µ—à–Ω–æ, ${failCount} –æ—à–∏–±–æ–∫)`,
                    { chat_id: chatId, message_id: progressMsg.message_id }
                  );
                }
              } catch (error: any) {
                failCount++;
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}: ${error.message}`);
              }
            }
          }
          
          // Final result
          bot.editMessageText(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n–û—à–∏–±–æ–∫: ${failCount}`,
            { chat_id: chatId, message_id: progressMsg.message_id }
          );
        });
      });
    } else if (query.data.startsWith("admin_message_user_")) {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      const userId = parseInt(query.data.split("_")[3], 10);
      
      const user = await storage.getUser(userId);
      if (!user) {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // Set up context for admin to send message
      bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.firstName} ${user.lastName || ''} (@${user.username}):`, {
        reply_markup: {
          force_reply: true
        }
      }).then(sentMsg => {
        // Add listener for the next message from this admin
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
          const messageText = msg.text;
          
          if (!messageText) {
            bot.sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
          }
          
          if (!user.telegramId) {
            bot.sendMessage(chatId, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Telegram ID.");
            return;
          }
          
          // Send message to user
          try {
            await bot.sendMessage(user.telegramId, `*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n${messageText}`, {
              parse_mode: "Markdown"
            });
            
            bot.sendMessage(chatId, `–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.firstName} ${user.lastName || ''} (@${user.username}).`);
          } catch (error: any) {
            bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
          }
        });
      });
    } else if (query.data === "admin_settings") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      // Get current settings
      const welcomeMessage = await storage.getSetting("welcome_message");
      const helpMessage = await storage.getSetting("help_message");
      const orderCompletedMessage = await storage.getSetting("order_completed_message");
      const adminIds = await storage.getSetting("telegram_admin_ids");
      const paymentInfo = await storage.getSetting("payment_info");
      
      let message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n";
      message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n";
      message += "1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
      message += "2. –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏\n";
      message += "3. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞\n";
      message += "4. ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n";
      message += "5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\n";
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data: "admin_settings_welcome" }],
            [{ text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É", callback_data: "admin_settings_help" }],
            [{ text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ", callback_data: "admin_settings_order" }],
            [{ text: "üë• –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤", callback_data: "admin_settings_admins" }],
            [{ text: "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ", callback_data: "admin_settings_payment" }]
          ]
        }
      });
    } else if (query.data === "admin_settings_welcome") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      const currentSetting = await storage.getSetting("welcome_message");
      const currentValue = currentSetting?.value || "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!";
      
      bot.sendMessage(chatId, `–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n${currentValue}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, {
        reply_markup: {
          force_reply: true
        }
      }).then(sentMsg => {
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
          const newValue = msg.text;
          
          if (!newValue) {
            bot.sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
          }
          
          await storage.updateSetting("welcome_message", newValue);
          bot.sendMessage(chatId, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
        });
      });
    } else if (query.data === "admin_settings_help") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      const currentSetting = await storage.getSetting("help_message");
      const currentValue = currentSetting?.value || "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ VPN —Å–µ—Ä–≤–∏—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.";
      
      bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏:\n\n${currentValue}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏:`, {
        reply_markup: {
          force_reply: true
        }
      }).then(sentMsg => {
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
          const newValue = msg.text;
          
          if (!newValue) {
            bot.sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
          }
          
          await storage.updateSetting("help_message", newValue);
          bot.sendMessage(chatId, "‚úÖ –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.");
        });
      });
    } else if (query.data === "admin_settings_order") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      const currentSetting = await storage.getSetting("order_completed_message");
      const currentValue = currentSetting?.value || "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞.";
      
      bot.sendMessage(chatId, `–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:\n\n${currentValue}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, {
        reply_markup: {
          force_reply: true
        }
      }).then(sentMsg => {
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
          const newValue = msg.text;
          
          if (!newValue) {
            bot.sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
          }
          
          await storage.updateSetting("order_completed_message", newValue);
          bot.sendMessage(chatId, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
        });
      });
    } else if (query.data === "admin_settings_admins") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      const currentSetting = await storage.getSetting("telegram_admin_ids");
      const currentValue = currentSetting?.value || telegramId;
      
      bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n${currentValue}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):`, {
        reply_markup: {
          force_reply: true
        }
      }).then(sentMsg => {
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
          const newValue = msg.text;
          
          if (!newValue) {
            bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
          }
          
          // Validate input (simple check)
          const adminIds = newValue.split(",").map(id => id.trim());
          if (adminIds.some(id => !/^\d+$/.test(id))) {
            bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            return;
          }
          
          // Make sure current admin is still in the list
          if (!adminIds.includes(telegramId)) {
            adminIds.push(telegramId);
            bot.sendMessage(chatId, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–∞—à ID –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –≤—ã –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø.");
          }
          
          await storage.updateSetting("telegram_admin_ids", adminIds.join(","));
          bot.sendMessage(chatId, "‚úÖ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.");
        });
      });
    } else if (query.data === "admin_settings_payment") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      const currentSetting = await storage.getSetting("payment_info");
      const currentValue = currentSetting?.value || "1. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: 5000 0000 0000 0000\n2. –°–ë–ü –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 (999) 000-00-00";
      
      bot.sendMessage(chatId, `–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n\n${currentValue}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ:`, {
        reply_markup: {
          force_reply: true
        }
      }).then(sentMsg => {
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
          const newValue = msg.text;
          
          if (!newValue) {
            bot.sendMessage(chatId, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.");
            return;
          }
          
          await storage.updateSetting("payment_info", newValue);
          bot.sendMessage(chatId, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
        });
      });
    } else if (query.data === "show_products") {
      // Show available products
      const products = await storage.getActiveProducts();
      
      if (products.length === 0) {
        bot.sendMessage(chatId, "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
        return;
      }
      
      let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n";
      products.forEach((product, index) => {
        message += `${index + 1}. ${product.name}\n`;
        message += `   –¶–µ–Ω–∞: ${(product.price / 100).toFixed(2)} —Ä—É–±.\n`;
        message += `   –¢–∏–ø: ${product.configType.toUpperCase()}\n`;
        message += `   –°—Ä–æ–∫: ${product.durationDays} –¥–Ω–µ–π\n\n`;
      });
      
      message += "–î–ª—è –ø–æ–∫—É–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 1";
      
      bot.sendMessage(chatId, message);
    } else if (query.data === "show_orders") {
      // Get user by Telegram ID
      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }
      
      // Get user orders
      const orders = await storage.getUserOrders(user.id);
      
      if (orders.length === 0) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
        return;
      }
      
      // Sort orders by date (newest first)
      orders.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
      
      let message = "üõí *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤*\n\n";
      
      for (const order of orders) {
        // Get product details
        const product = await storage.getProduct(order.productId);
        if (!product) continue;
        
        message += `*–ó–∞–∫–∞–∑ #${order.id}*\n`;
        message += `–ü—Ä–æ–¥—É–∫—Ç: ${product.name}\n`;
        message += `–°—Ç–∞—Ç—É—Å: ${getOrderStatusText(order.status || 'pending')}\n`;
        message += `–¶–µ–Ω–∞: ${(order.amount / 100).toFixed(2)} —Ä—É–±.\n`;
        message += `–î–∞—Ç–∞: ${order.createdAt.toLocaleDateString()}\n\n`;
      }
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "back_to_profile" }]
          ]
        }
      });
    } else if (query.data === "back_to_profile") {
      // Get user by Telegram ID
      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) {
        bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }
      
      const orders = await storage.getUserOrders(user.id);
      const configs = await storage.getUserVpnConfigs(user.id);
      
      const activeConfigs = configs.filter(config => {
        const now = new Date();
        return config.isActive && config.validUntil > now;
      });
      
      // Count completed orders
      const completedOrders = orders.filter(order => order.status === 'completed').length;
      const pendingOrders = orders.filter(order => order.status === 'pending' || order.status === 'awaiting_confirmation').length;
      
      // Calculate total spent
      const totalSpent = orders
        .filter(order => order.status === 'completed')
        .reduce((sum, order) => sum + order.amount, 0) / 100;
      
      let message = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
      message += `üìã *–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
      message += `–ò–º—è: ${user.firstName} ${user.lastName || ''}\n`;
      message += `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${user.username}\n`;
      message += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registrationDate.toLocaleDateString()}\n\n`;
      
      message += `üõí *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:*\n`;
      message += `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}\n`;
      message += `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedOrders}\n`;
      message += `–û–∂–∏–¥–∞—é—â–∏—Ö: ${pendingOrders}\n`;
      message += `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent.toFixed(2)} —Ä—É–±.\n\n`;
      
      message += `üîê *VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:*\n`;
      message += `–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${configs.length}\n`;
      message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${activeConfigs.length}\n`;
      
      // List active configs
      if (activeConfigs.length > 0) {
        message += "\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n";
        activeConfigs.forEach((config, index) => {
          const daysLeft = Math.ceil((config.validUntil.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
          message += `${index + 1}. ${config.name}\n`;
          message += `   –¢–∏–ø: ${config.configType.toUpperCase()}\n`;
          message += `   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n`;
        });
      }
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üì¶ –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data: "show_products" }],
            [{ text: "üõí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data: "show_orders" }]
          ]
        }
      });
    } else if (query.data === "admin_stats") {
      // Check if user is admin
      if (!(await isAdmin(telegramId))) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        return;
      }
      
      // Get statistics
      const users = await storage.getAllUsers();
      const activeUsers = users.filter(user => !user.isBlocked).length;
      const blockedUsers = users.filter(user => user.isBlocked).length;
      
      const orders = await storage.getAllOrders();
      const completedOrders = orders.filter(order => order.status === 'completed').length;
      const pendingOrders = orders.filter(order => order.status === 'pending' || order.status === 'awaiting_confirmation').length;
      const cancelledOrders = orders.filter(order => order.status === 'cancelled').length;
      
      const totalRevenue = orders
        .filter(order => order.status === 'completed')
        .reduce((sum, order) => sum + order.amount, 0) / 100; // Convert from cents to rubles
      
      const products = await storage.getAllProducts();
      const activeProducts = products.filter(product => product.isActive).length;
      
      let message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n";
      message += "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n";
      message += `–í—Å–µ–≥–æ: ${users.length}\n`;
      message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers}\n`;
      message += `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${blockedUsers}\n\n`;
      
      message += "üõí *–ó–∞–∫–∞–∑—ã:*\n";
      message += `–í—Å–µ–≥–æ: ${orders.length}\n`;
      message += `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedOrders}\n`;
      message += `–û–∂–∏–¥–∞—é—â–∏—Ö: ${pendingOrders}\n`;
      message += `–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${cancelledOrders}\n\n`;
      
      message += "üí∞ *–ü—Ä–æ–¥–∞–∂–∏:*\n";
      message += `–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue.toFixed(2)} —Ä—É–±.\n\n`;
      
      message += "üì¶ *–ü—Ä–æ–¥—É–∫—Ç—ã:*\n";
      message += `–í—Å–µ–≥–æ: ${products.length}\n`;
      message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeProducts}\n`;
      
      bot.sendMessage(chatId, message, {
        parse_mode: "Markdown"
      });
    }
    
    if (query.data.startsWith("payment_")) {
      const orderId = parseInt(query.data.split("_")[1], 10);
      
      // Update order status
      const order = await storage.getOrder(orderId);
      if (!order) {
        bot.sendMessage(chatId, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      await storage.updateOrderStatus(orderId, "awaiting_confirmation");
      
      // Ask for payment proof
      const confirmationSetting = await storage.getSetting("payment_confirmation_message");
      const confirmationMessage = confirmationSetting?.value || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞.";
      
      bot.sendMessage(chatId, confirmationMessage, {
        reply_markup: {
          force_reply: true
        }
      });
      
      // Store context
      bot.onReplyToMessage(chatId, query.message.message_id + 1, async (photoMsg) => {
        if (photoMsg.photo) {
          // Get the photo file
          const photoId = photoMsg.photo[photoMsg.photo.length - 1].file_id;
          
          // Save payment proof URL
          await storage.updateOrderStatus(orderId, "awaiting_confirmation");
          
          bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
          
          // Notify admin (should be implemented)
          const adminIds = await storage.getSetting("telegram_admin_ids");
          if (adminIds?.value) {
            const adminIdsList = adminIds.value.split(",");
            for (const adminId of adminIdsList) {
              bot.sendMessage(adminId, `–ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
              bot.sendPhoto(adminId, photoId, {
                caption: `–ó–∞–∫–∞–∑ #${orderId} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `admin_confirm_${orderId}` },
                      { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `admin_reject_${orderId}` }
                    ]
                  ]
                }
              });
            }
          }
        } else {
          bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.");
        }
      });
    } else if (query.data.startsWith("cancel_")) {
      const orderId = parseInt(query.data.split("_")[1], 10);
      await storage.updateOrderStatus(orderId, "cancelled");
      bot.sendMessage(chatId, "–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.");
    } else if (query.data.startsWith("admin_confirm_")) {
      const orderId = parseInt(query.data.split("_")[2], 10);
      const order = await storage.getOrder(orderId);
      
      if (!order) {
        bot.sendMessage(chatId, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // Find user and product
      const user = await storage.getUser(order.userId);
      const product = await storage.getProduct(order.productId);
      
      if (!user || !product) {
        bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // Update order to completed
      await storage.updateOrderStatus(orderId, "completed", new Date());
      
      // Generate VPN config
      const configName = `${product.configType}-${new Date().getTime()}-${user.id}`;
      const validUntil = new Date();
      validUntil.setDate(validUntil.getDate() + product.durationDays);
      
      // Generate sample config data
      const configData = JSON.stringify({
        type: product.configType,
        server: "your-vpn-server.com",
        port: 443,
        id: `user-${user.id}-${Date.now()}`,
        encryption: "auto",
        security: "tls"
      });
      
      // Save config
      const vpnConfig = await storage.createVpnConfig({
        userId: user.id,
        name: configName,
        configType: product.configType,
        configData,
        validUntil,
        isActive: true
      });
      
      // Associate order with config
      await storage.updateOrderConfig(order.id, vpnConfig.id);
      
      // Notify user
      if (user.telegramId) {
        const completedMessage = await storage.getSetting("order_completed_message");
        const message = completedMessage?.value || "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞.";
        
        bot.sendMessage(user.telegramId, message);
        
        // Send config
        bot.sendMessage(user.telegramId, "–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data: `config_${vpnConfig.id}` }]
            ]
          }
        });
      }
      
      bot.sendMessage(chatId, `–ó–∞–∫–∞–∑ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞.`);
    } else if (query.data.startsWith("admin_reject_")) {
      const orderId = parseInt(query.data.split("_")[2], 10);
      const order = await storage.getOrder(orderId);
      
      if (!order) {
        bot.sendMessage(chatId, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      
      // Update order to cancelled
      await storage.updateOrderStatus(orderId, "cancelled");
      
      // Notify user
      const user = await storage.getUser(order.userId);
      if (user && user.telegramId) {
        bot.sendMessage(user.telegramId, `–í–∞—à –∑–∞–∫–∞–∑ #${orderId} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`);
      }
      
      bot.sendMessage(chatId, `–ó–∞–∫–∞–∑ #${orderId} –æ—Ç–∫–ª–æ–Ω–µ–Ω.`);
    } else if (query.data.startsWith("config_")) {
      const configId = parseInt(query.data.split("_")[1], 10);
      const config = await storage.getVpnConfig(configId);
      
      if (!config) {
        bot.sendMessage(chatId, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
      }
      
      // Send config file as text message
      let configMessage = `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${config.name}\n–¢–∏–ø: ${config.configType.toUpperCase()}\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: ${config.validUntil.toLocaleDateString()}\n\n`;
      configMessage += "```\n";
      configMessage += config.configData;
      configMessage += "\n```";
      
      bot.sendMessage(chatId, configMessage, {
        parse_mode: "Markdown"
      });
    }
  });
  
  // Handle "–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" button
  bot.onText(/üîê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    const user = await storage.getUserByTelegramId(telegramId);
    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }
    
    if (user.isBlocked) {
      bot.sendMessage(chatId, "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }
    
    const configs = await storage.getUserVpnConfigs(user.id);
    
    if (configs.length === 0) {
      bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ VPN –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ–¥—É–∫—Ç—ã'.");
      return;
    }
    
    let message = "–í–∞—à–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n";
    
    const now = new Date();
    configs.forEach((config, index) => {
      const isActive = config.isActive && config.validUntil > now;
      message += `${index + 1}. ${config.name}\n`;
      message += `   –¢–∏–ø: ${config.configType.toUpperCase()}\n`;
      message += `   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${config.validUntil.toLocaleDateString()}\n`;
      message += `   –°—Ç–∞—Ç—É—Å: ${isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
    });
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: configs.map((config, index) => [
          { text: `üì• –°–∫–∞—á–∞—Ç—å ${config.name}`, callback_data: `config_${config.id}` }
        ])
      }
    });
  });
  
  // Handle "–ü–æ–º–æ—â—å" button
  // Support command handler
  bot.onText(/\/support/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    const user = await storage.getUserByTelegramId(telegramId);
    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }
    
    if (user.isBlocked) {
      bot.sendMessage(chatId, "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const supportContactSetting = await storage.getSetting("support_contact");
    const supportContact = supportContactSetting?.value || "@support_username"; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    let message = `üìû *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n`;
    message += `–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VPN-—Å–µ—Ä–≤–∏—Å–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n\n`;
    message += `‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: ${supportContact}\n`;
    message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n\n`;
    message += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à ID –≤ —Å–∏—Å—Ç–µ–º–µ: \`${telegramId}\`\n\n`;
    message += `–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:`;
    
    bot.sendMessage(chatId, message, {
      parse_mode: "Markdown"
    });
  });
  
  bot.onText(/‚ùì –ü–æ–º–æ—â—å/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await storage.getUserByTelegramId(telegramId);
    if (user?.isBlocked) {
      bot.sendMessage(chatId, "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }
    
    const helpSetting = await storage.getSetting("help_message");
    let defaultHelpMessage = `üî∞ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN-—Å–µ—Ä–≤–∏—Å–∞*\n\n`
    + `*üì± –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n`
    + `1. –í—ã–±–µ—Ä–∏—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã¬ª\n`
    + `2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã\n`
    + `3. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n`
    + `4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN\n\n`
    + `*üì≤ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*\n`
    + `1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG (Android) –∏–ª–∏ Shadowrocket (iOS)\n`
    + `2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´üîê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π VPN\n`
    + `3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n`
    + `4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n`
    + `*‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n`
    + `‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? ‚Äî –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã¬ª\n`
    + `‚Ä¢ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ? ‚Äî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n`
    + `‚Ä¢ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? ‚Äî –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´üë§ –ü—Ä–æ—Ñ–∏–ª—å¬ª\n\n`
    + `*‚ö†Ô∏è –í–∞–∂–Ω–æ:*\n`
    + `‚Ä¢ –û–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n`
    + `‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n`
    + `‚Ä¢ –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ IP-–∞–¥—Ä–µ—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ`;
    
    const helpMessage = helpSetting?.value || defaultHelpMessage;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: "üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data: "help_products" },
          { text: "üîê –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data: "help_configs" }
        ],
        [
          { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: "help_profile" }
        ]
      ]
    };
    
    bot.sendMessage(chatId, helpMessage, {
      parse_mode: "Markdown",
      reply_markup: inlineKeyboard
    });
  });
  
  // Handle admin panel button
  bot.onText(/‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    // Check if user is admin
    if (!(await isAdmin(telegramId))) {
      bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
      return;
    }
    
    bot.sendMessage(chatId, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data: "admin_users" }],
          [{ text: "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data: "admin_message" }],
          [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "admin_stats" }]
        ]
      }
    });
  });
  
  // Handle "–ü—Ä–æ—Ñ–∏–ª—å" button
  bot.onText(/üë§ –ü—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();
    
    if (!telegramId) {
      bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.");
      return;
    }
    
    const user = await storage.getUserByTelegramId(telegramId);
    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }
    
    if (user.isBlocked) {
      bot.sendMessage(chatId, "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }
    
    const orders = await storage.getUserOrders(user.id);
    const configs = await storage.getUserVpnConfigs(user.id);
    
    const activeConfigs = configs.filter(config => {
      const now = new Date();
      return config.isActive && config.validUntil > now;
    });
    
    // Count completed orders
    const completedOrders = orders.filter(order => order.status === 'completed').length;
    const pendingOrders = orders.filter(order => order.status === 'pending' || order.status === 'awaiting_confirmation').length;
    
    // Calculate total spent
    const totalSpent = orders
      .filter(order => order.status === 'completed')
      .reduce((sum, order) => sum + order.amount, 0) / 100;
    
    let message = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
    message += `üìã *–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
    message += `–ò–º—è: ${user.firstName} ${user.lastName || ''}\n`;
    message += `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${user.username}\n`;
    message += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registrationDate.toLocaleDateString()}\n\n`;
    
    message += `üõí *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:*\n`;
    message += `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}\n`;
    message += `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedOrders}\n`;
    message += `–û–∂–∏–¥–∞—é—â–∏—Ö: ${pendingOrders}\n`;
    message += `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent.toFixed(2)} —Ä—É–±.\n\n`;
    
    message += `üîê *VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:*\n`;
    message += `–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${configs.length}\n`;
    message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${activeConfigs.length}\n`;
    
    // List active configs
    if (activeConfigs.length > 0) {
      message += "\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n";
      activeConfigs.forEach((config, index) => {
        const daysLeft = Math.ceil((config.validUntil.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
        message += `${index + 1}. ${config.name}\n`;
        message += `   –¢–∏–ø: ${config.configType.toUpperCase()}\n`;
        message += `   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n`;
      });
    }
    
    bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üì¶ –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data: "show_products" }],
          [{ text: "üõí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data: "show_orders" }]
        ]
      }
    });
  });
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Initialize bot when server starts
  initBot();
  
  // Auth Routes
  app.post("/api/auth/login", async (req, res) => {
    const { username, password } = req.body;
    
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }
    
    try {
      // Find admin by username
      const admin = await storage.getAdminByUsername(username);
      
      if (!admin) {
        return res.status(401).json({ message: "Invalid credentials" });
      }
      
      // Verify password
      const isPasswordValid = await storage.verifyPassword(password, admin.passwordHash);
      
      if (!isPasswordValid) {
        return res.status(401).json({ message: "Invalid credentials" });
      }
      
      // Create new session
      const ipAddress = req.ip;
      const userAgent = req.headers["user-agent"];
      const session = await storage.createAdminSession(admin.id, ipAddress, userAgent);
      
      // Update last login time
      await storage.updateAdmin(admin.id, { lastLogin: new Date() });
      
      // Return token and expiry
      res.json({
        token: session.token,
        username: admin.username,
        expiresAt: session.expiresAt.toISOString()
      });
    } catch (error) {
      console.error("Login error:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });
  
  app.post("/api/auth/logout", async (req, res) => {
    const { token } = req.body;
    
    if (!token) {
      return res.status(400).json({ message: "Token is required" });
    }
    
    try {
      await storage.deleteAdminSession(token);
      res.json({ message: "Logged out successfully" });
    } catch (error) {
      console.error("Logout error:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });
  
  app.get("/api/auth/verify", async (req, res) => {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ valid: false, message: "No token provided" });
    }
    
    const token = authHeader.substring(7); // Remove 'Bearer ' prefix
    
    try {
      const session = await storage.getAdminSessionByToken(token);
      
      if (!session) {
        return res.json({ valid: false, message: "Invalid or expired token" });
      }
      
      // Get admin info
      const admin = await storage.getAdminByUsername(session.adminId.toString());
      
      if (!admin) {
        return res.json({ valid: false, message: "Admin not found" });
      }
      
      res.json({
        valid: true,
        username: admin.username,
        expiresAt: session.expiresAt.toISOString()
      });
    } catch (error) {
      console.error("Verify token error:", error);
      res.status(500).json({ valid: false, message: "Internal server error" });
    }
  });
  
  app.post("/api/auth/setup-admin", async (req, res) => {
    const { username, password, email } = req.body;
    
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }
    
    try {
      // Check if any admin already exists
      const [firstAdmin] = await db.select().from(admins).limit(1);
      
      if (firstAdmin) {
        return res.status(403).json({ message: "Admin already set up" });
      }
      
      // Create first admin
      const admin = await storage.createAdmin({
        username,
        passwordHash: password, // hashPassword is called inside createAdmin
        email
      });
      
      res.status(201).json({
        id: admin.id,
        username: admin.username,
        email: admin.email,
        createdAt: admin.createdAt
      });
    } catch (error) {
      console.error("Setup admin error:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // API Routes
  // User routes
  app.get("/api/users", async (req, res) => {
    const users = await storage.getAllUsers();
    res.json(users);
  });

  app.get("/api/users/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const user = await storage.getUser(id);
    
    if (!user) {
      res.status(404).json({ message: "User not found" });
      return;
    }
    
    res.json(user);
  });

  app.post("/api/users", async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      const user = await storage.createUser(userData);
      res.status(201).json(user);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid user data", errors: error.errors });
      } else {
        res.status(500).json({ message: "Internal server error" });
      }
    }
  });

  app.patch("/api/users/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const userData = req.body;
    
    try {
      const updatedUser = await storage.updateUser(id, userData);
      
      if (!updatedUser) {
        res.status(404).json({ message: "User not found" });
        return;
      }
      
      res.json(updatedUser);
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  app.post("/api/users/:id/block", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const { isBlocked } = req.body;
    
    if (typeof isBlocked !== 'boolean') {
      res.status(400).json({ message: "isBlocked must be a boolean" });
      return;
    }
    
    try {
      const updatedUser = await storage.blockUser(id, isBlocked);
      
      if (!updatedUser) {
        res.status(404).json({ message: "User not found" });
        return;
      }
      
      res.json(updatedUser);
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Product routes
  app.get("/api/products", async (req, res) => {
    const active = req.query.active === 'true';
    const products = active ? await storage.getActiveProducts() : await storage.getAllProducts();
    res.json(products);
  });

  app.get("/api/products/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const product = await storage.getProduct(id);
    
    if (!product) {
      res.status(404).json({ message: "Product not found" });
      return;
    }
    
    res.json(product);
  });

  app.post("/api/products", async (req, res) => {
    try {
      const productData = insertProductSchema.parse(req.body);
      const product = await storage.createProduct(productData);
      res.status(201).json(product);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid product data", errors: error.errors });
      } else {
        res.status(500).json({ message: "Internal server error" });
      }
    }
  });

  app.patch("/api/products/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const productData = req.body;
    
    try {
      const updatedProduct = await storage.updateProduct(id, productData);
      
      if (!updatedProduct) {
        res.status(404).json({ message: "Product not found" });
        return;
      }
      
      res.json(updatedProduct);
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  app.delete("/api/products/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    
    try {
      const result = await storage.deleteProduct(id);
      
      if (!result) {
        res.status(404).json({ message: "Product not found" });
        return;
      }
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Order routes
  app.get("/api/orders", async (req, res) => {
    const userId = req.query.userId ? parseInt(req.query.userId as string, 10) : undefined;
    const recent = req.query.recent ? parseInt(req.query.recent as string, 10) : undefined;
    
    let orders;
    if (recent) {
      orders = await storage.getRecentOrders(recent);
    } else if (userId) {
      orders = await storage.getUserOrders(userId);
    } else {
      orders = await storage.getAllOrders();
    }
    
    res.json(orders);
  });

  app.get("/api/orders/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const order = await storage.getOrder(id);
    
    if (!order) {
      res.status(404).json({ message: "Order not found" });
      return;
    }
    
    res.json(order);
  });

  app.post("/api/orders", async (req, res) => {
    try {
      const orderData = insertOrderSchema.parse(req.body);
      const order = await storage.createOrder(orderData);
      res.status(201).json(order);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid order data", errors: error.errors });
      } else {
        res.status(500).json({ message: "Internal server error" });
      }
    }
  });

  app.patch("/api/orders/:id/status", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const { status } = req.body;
    
    try {
      const updatedOrder = await storage.updateOrderStatus(id, status);
      
      if (!updatedOrder) {
        res.status(404).json({ message: "Order not found" });
        return;
      }
      
      // If completing order and auto activation is enabled, create VPN config
      if (status === 'completed') {
        const autoActivateSetting = await storage.getSetting("auto_activate_configs");
        const autoActivate = autoActivateSetting?.value === 'true';
        
        if (autoActivate) {
          const order = await storage.getOrder(id);
          if (order) {
            const product = await storage.getProduct(order.productId);
            
            if (product) {
              const configName = `${product.configType}-${new Date().getTime()}-${order.userId}`;
              const validUntil = new Date();
              validUntil.setDate(validUntil.getDate() + product.durationDays);
              
              // Generate sample config data
              const configData = JSON.stringify({
                type: product.configType,
                server: "your-vpn-server.com",
                port: 443,
                id: `user-${order.userId}-${Date.now()}`,
                encryption: "auto",
                security: "tls"
              });
              
              // Save config
              const vpnConfig = await storage.createVpnConfig({
                userId: order.userId,
                name: configName,
                configType: product.configType,
                configData,
                validUntil,
                isActive: true
              });
              
              // Associate order with config
              await storage.updateOrderConfig(order.id, vpnConfig.id);
              
              // Notify user via Telegram if bot is initialized
              const user = await storage.getUser(order.userId);
              if (user && user.telegramId && bot) {
                const completedMessage = await storage.getSetting("order_completed_message");
                const message = completedMessage?.value || "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞.";
                
                bot.sendMessage(user.telegramId, message);
              }
            }
          }
        }
      }
      
      res.json(updatedOrder);
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Block/Unblock user
  app.post("/api/users/:id/block", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const { isBlocked } = req.body;
      
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const updatedUser = await storage.blockUser(userId, isBlocked);
      
      // If user is being blocked and there's a bot instance running, notify the user
      if (isBlocked && bot && user.telegramId) {
        try {
          await bot.sendMessage(user.telegramId, "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.");
        } catch (botError) {
          console.error(`Failed to send block notification to user ${userId}:`, botError);
        }
      }
      
      res.json(updatedUser);
    } catch (error) {
      res.status(500).json({ error: String(error) });
    }
  });

  // VPN Config routes
  app.get("/api/vpn-configs", async (req, res) => {
    const userId = req.query.userId ? parseInt(req.query.userId as string, 10) : undefined;
    const active = req.query.active === 'true';
    
    let configs;
    if (userId) {
      configs = await storage.getUserVpnConfigs(userId);
    } else if (active) {
      configs = await storage.getActiveVpnConfigs();
    } else {
      // No direct method to get all configs, let's combine those we have access to
      const users = await storage.getAllUsers();
      configs = [];
      for (const user of users) {
        const userConfigs = await storage.getUserVpnConfigs(user.id);
        configs.push(...userConfigs);
      }
    }
    
    res.json(configs);
  });

  app.get("/api/vpn-configs/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const config = await storage.getVpnConfig(id);
    
    if (!config) {
      res.status(404).json({ message: "VPN config not found" });
      return;
    }
    
    res.json(config);
  });

  app.post("/api/vpn-configs", async (req, res) => {
    try {
      const configData = insertVpnConfigSchema.parse(req.body);
      const config = await storage.createVpnConfig(configData);
      res.status(201).json(config);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid VPN config data", errors: error.errors });
      } else {
        res.status(500).json({ message: "Internal server error" });
      }
    }
  });

  app.patch("/api/vpn-configs/:id", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    const configData = req.body;
    
    try {
      const updatedConfig = await storage.updateVpnConfig(id, configData);
      
      if (!updatedConfig) {
        res.status(404).json({ message: "VPN config not found" });
        return;
      }
      
      res.json(updatedConfig);
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  app.post("/api/vpn-configs/:id/deactivate", async (req, res) => {
    const id = parseInt(req.params.id, 10);
    
    try {
      const updatedConfig = await storage.deactivateVpnConfig(id);
      
      if (!updatedConfig) {
        res.status(404).json({ message: "VPN config not found" });
        return;
      }
      
      res.json(updatedConfig);
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Settings routes
  app.get("/api/settings", async (req, res) => {
    const settings = await storage.getAllSettings();
    res.json(settings);
  });

  app.post("/api/settings", async (req, res) => {
    try {
      const settingsArray = req.body;
      
      if (!Array.isArray(settingsArray)) {
        res.status(400).json({ message: "Settings must be an array" });
        return;
      }
      
      await storage.setSettings(settingsArray);
      
      // Reinitialize bot if telegram_bot_token was updated
      if (settingsArray.some(s => s.key === 'telegram_bot_token')) {
        await initBot();
      }
      
      const updatedSettings = await storage.getAllSettings();
      res.json(updatedSettings);
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });

  app.get("/api/settings/:key", async (req, res) => {
    const key = req.params.key;
    const setting = await storage.getSetting(key);
    
    if (!setting) {
      res.status(404).json({ message: "Setting not found" });
      return;
    }
    
    res.json(setting);
  });

  // Stats routes
  app.get("/api/stats", async (req, res) => {
    const stats = await storage.getStats();
    res.json(stats);
  });

  app.get("/api/stats/sales", async (req, res) => {
    const salesData = await storage.getSalesData();
    res.json(salesData);
  });

  app.get("/api/stats/popular-products", async (req, res) => {
    const popularProducts = await storage.getPopularProducts();
    res.json(popularProducts);
  });

  // Telegram bot routes
  app.post("/api/bot/restart", async (req, res) => {
    const success = await initBot();
    if (success) {
      res.json({ message: "Bot restarted successfully" });
    } else {
      res.status(500).json({ message: "Failed to restart bot" });
    }
  });

  app.post("/api/bot/check-token", async (req, res) => {
    const { token } = req.body;
    
    if (!token) {
      res.status(400).json({ message: "Token is required" });
      return;
    }
    
    try {
      const testBot = new TelegramBot(token, { polling: false });
      const botInfo = await testBot.getMe();
      
      res.json({
        success: true,
        bot_name: botInfo.first_name,
        username: botInfo.username
      });
    } catch (error) {
      res.status(400).json({
        success: false,
        error: "Invalid token"
      });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
  app.post("/api/bot/send-message", async (req, res) => {
    const { userId, message } = req.body;
    
    if (!bot) {
      return res.status(500).json({ success: false, message: "Telegram bot is not initialized" });
    }
    
    try {
      const user = await storage.getUser(userId);
      
      if (!user || !user.telegramId) {
        return res.status(400).json({ success: false, message: "User has no Telegram ID" });
      }
      
      await bot.sendMessage(user.telegramId.toString(), message, { parse_mode: "Markdown" });
      res.json({ success: true, message: "Message sent successfully" });
    } catch (error: any) {
      console.error("Error sending message:", error);
      res.status(500).json({ success: false, message: `Failed to send message: ${error.message}` });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
  app.post("/api/bot/broadcast", async (req, res) => {
    const { message } = req.body;
    
    if (!bot) {
      return res.status(500).json({ success: false, message: "Telegram bot is not initialized" });
    }
    
    if (!message || !message.trim()) {
      return res.status(400).json({ success: false, message: "Message cannot be empty" });
    }
    
    try {
      const users = await storage.getAllUsers();
      let sent = 0;
      let failed = 0;
      
      for (const user of users) {
        if (user.telegramId && !user.isBlocked) {
          try {
            await bot.sendMessage(user.telegramId.toString(), `*–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n${message}`, { 
              parse_mode: "Markdown"
            });
            sent++;
          } catch (error) {
            console.error(`Failed to send message to user ${user.id}:`, error);
            failed++;
          }
        } else {
          failed++;
        }
      }
      
      res.json({ success: true, sent, failed });
    } catch (error: any) {
      console.error("Error broadcasting message:", error);
      res.status(500).json({ success: false, message: `Failed to broadcast: ${error.message}` });
    }
  });

  // Admin Authentication routes
  // Login route
  app.post("/api/admin/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password are required" });
      }
      
      const admin = await storage.getAdminByUsername(username);
      
      if (!admin) {
        return res.status(401).json({ message: "Invalid username or password" });
      }
      
      const isPasswordValid = await storage.verifyPassword(password, admin.passwordHash);
      
      if (!isPasswordValid) {
        return res.status(401).json({ message: "Invalid username or password" });
      }
      
      // Create a session
      const ipAddress = req.ip;
      const userAgent = req.headers["user-agent"];
      const session = await storage.createAdminSession(admin.id, ipAddress, userAgent);
      
      // Update admin's last login time
      await storage.updateAdmin(admin.id, { lastLogin: new Date() });
      
      // Send token to the client
      res.json({
        token: session.token,
        username: admin.username,
        expiresAt: session.expiresAt
      });
    } catch (error) {
      console.error("Login error:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });
  
  // Logout route
  app.post("/api/admin/logout", async (req, res) => {
    try {
      const { token } = req.body;
      
      if (!token) {
        return res.status(400).json({ message: "Token is required" });
      }
      
      await storage.deleteAdminSession(token);
      res.json({ message: "Logged out successfully" });
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });
  
  // Verify token route
  app.post("/api/admin/verify-token", async (req, res) => {
    try {
      const { token } = req.body;
      
      if (!token) {
        return res.status(400).json({ message: "Token is required" });
      }
      
      const session = await storage.getAdminSessionByToken(token);
      
      if (!session) {
        return res.status(401).json({ message: "Invalid or expired token" });
      }
      
      // Get admin info
      const admin = await storage.getAdminByUsername(session.adminId.toString());
      
      res.json({
        valid: true,
        username: admin?.username,
        expiresAt: session.expiresAt
      });
    } catch (error) {
      res.status(500).json({ message: "Internal server error" });
    }
  });
  
  // Create initial admin if none exists
  app.post("/api/admin/setup", async (req, res) => {
    try {
      // Check if any admin exists
      const allAdmins = await db.select().from(admins);
      
      if (allAdmins.length > 0) {
        return res.status(400).json({ message: "Admin account already exists" });
      }
      
      const { username, password, email } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password are required" });
      }
      
      // Create the admin
      const admin = await storage.createAdmin({
        username,
        passwordHash: password,
        email
      });
      
      res.json({
        message: "Admin account created successfully",
        username: admin.username
      });
    } catch (error) {
      console.error("Admin setup error:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Payment routes
  app.post("/api/create-payment-intent", async (req, res) => {
    if (!stripe) {
      res.status(500).json({ message: "Stripe is not configured" });
      return;
    }
    
    try {
      const { amount } = req.body;
      
      if (!amount || typeof amount !== 'number') {
        res.status(400).json({ message: "Invalid amount" });
        return;
      }
      
      const paymentIntent = await stripe.paymentIntents.create({
        amount: Math.round(amount * 100), // Convert to cents
        currency: "rub",
      });
      
      res.json({ clientSecret: paymentIntent.client_secret });
    } catch (error: any) {
      res.status(500).json({ message: "Error creating payment intent: " + error.message });
    }
  });

  const httpServer = createServer(app);

  return httpServer;
}
